plugins {
    id "org.jetbrains.kotlin.jvm"           version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.springframework.boot"           version "${springBootVersion}"
    id "io.spring.dependency-management"    version "${dependencyManagementVersion}"
    id "com.bmuschko.nexus"                 version "${nexusVersion}"
    id "io.gitlab.arturbosch.detekt"        version "${detektVersion}"
    id "org.sonarqube"                      version "${sonarQubeVersion}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'com.bmuschko.nexus'
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "jacoco"

def jarSuffix = System.getenv('JAR_SUFFIX') ?: ""
description = description
group       = group
version     = version + jarSuffix

// Separando dependencias para outro arquivo.
apply from: 'dependencies.gradle'

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.17.1'
        }
        if (details.requested.group == "com.fasterxml.jackson.core") {
            details.useVersion '2.13.1'
        }
    }
}

repositories {

    maven {
        allowInsecureProtocol = true
        url = macRepo + '/maven-central'
    }

    maven {
        allowInsecureProtocol = true
        url = macRepo + '/nexusrepo'
    }

    maven {
        allowInsecureProtocol = true
        url = macRepo + '/maven-releases'
    }

    maven {
        url = 'https://packages.confluent.io/maven'
    }

    mavenCentral()
    jcenter {
        content {
            includeGroup "org.jetbrains.kotlinx"
        }
    }

    mavenLocal()
}

    bootJar {
        launchScript()
    }

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xjsr305=strict"
        jvmTarget = jvm
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xjsr305=strict"
        jvmTarget = jvm
    }
}

test {
    useJUnitPlatform()
    ignoreFailures = false
    jvmArgs = ["-Duser.timezone=UTC"]
}

sourceSets {
    main {
        java.srcDir("src/main/kotlin")
    }
    test {
        java.srcDir("src/test/kotlin")
    }
}

detekt {

    failFast = true
    buildUponDefaultConfig = true
    config = files("$projectDir/config/detekt.yml")

    reports {
        html.enabled = true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco/html")
    }
}

sonarqube {
    properties {
        property 'sonar.tests', 'src/test/'
    }
}

nexus {
    sign                  = false
    repositoryUrl         = macRepo + '/maven-releases'
    snapshotRepositoryUrl = macRepo + '/maven-snapshots'
}

task copyToLib(type: Copy) {
    from configurations.localDeps
    into "$buildDir/output/lib"
}

bootJar.dependsOn(copyToLib)
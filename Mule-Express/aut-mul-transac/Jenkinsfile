@NonCPS
def configFromBranch(branch) {
    def env_dev = [
        rancherContext: 'c-lh4tc:p-qzrhd',
        deploymentFile: 'deployment.yml',
        namespace: 'backoffice-dev'
    ]
    def env_qa = [
        rancherContext: 'c-lh4tc:p-qzrhd',
        deploymentFile: 'deployment.yml',
        namespace: 'backoffice-qa'
    ]
    def env_staging = [
        rancherContext: 'c-lh4tc:p-qzrhd',
        deploymentFile: 'deployment.yml',
        namespace: 'backoffice-staging'
    ]
    def env_prd = [
        rancherContext: '',
        deploymentFile: '',
        namespace: ''
    ]
    if (branch ==~ /(development)/) { 
        return [
            shouldTest: true,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: true,
            tag: 'dev',
            deployments: [env_dev]
        ]
    }
    else if (branch ==~ /(qa)/) {
        return [
            shouldTest: true,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: true,
            tag: 'qa',
            deployments: [env_qa]
        ]
    }
    else if (branch ==~ /(staging)/) {
        return [
            shouldTest: false,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: true,
            tag: 'stg',
            deployments: [env_staging]
        ]
    }
    else if (branch ==~ /(master)/) {
        return [
            shouldTest: false,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: false,
            tag: 'prd',
            deployments: [env_prd]
        ]
    }
    else {
        return [
            shouldTest: false,
            shouldBuildImage: false,
            shouldPushImage: false,
            shouldDeploy: false,
            tag: '-',
            deployments: []
        ]
    }
}

pipeline {
    agent none
    
    environment {
        CONFIG = configFromBranch(BRANCH_NAME)
        SHOULD_TEST = "${CONFIG.shouldTest}"
        SHOULD_BUILD_IMAGE = "${CONFIG.shouldBuildImage}"
        SHOULD_PUSH_IMAGE = "${CONFIG.shouldPushImage}"
        SHOULD_DEPLOY = "${CONFIG.shouldDeploy}"

        GIT_URL="https://macvisacard@bitbucket.org/macvisacard/aut-mul-transacao.git"
        PROJECT_NAME_ECR="aut-mul-transacao"
        PROJECT_NAME="backoffice-mule-transacao-api"

        IMAGE_TAG = "${CONFIG.tag}-${env.BUILD_ID}"
        IMAGE_NAME = "${PROJECT_NAME_ECR}:${IMAGE_TAG}"
        IMAGE_URL = "123721783999.dkr.ecr.sa-east-1.amazonaws.com/${IMAGE_NAME}"
    }

    stages {
        stage ('CI') {
            agent {
                label 'TestContainer'
            }
            stages {
                stage('SCM - Checkout') {
                    steps{
                        cleanWs()
                        git branch: BRANCH_NAME, 
                        credentialsId: "bitb-mac", 
                        url: GIT_URL
                        echo 'SCM Checkout'
                    }
                }
                stage ('Test & Publish QA Reports'){
                    when {
                      expression { SHOULD_TEST == 'true' }
                    }
                    steps{
                        withMaven( maven: 'maven-3', jdk: 'jdk8-open'){
                            echo 'Tests mvn'
                            echo 'Sonnar'
                        }
                    }
                }
            }
        }
        stage ('CD') {
            stages {
                stage ('Deploy') {
                    agent {
                        label 'Build'
                    }
                    stages{
                        stage('Maven - Build'){
                            when {
                              expression { SHOULD_BUILD_IMAGE == 'true' }
                            }     
                            steps{
                                withMaven( maven: 'maven-3', jdk: 'jdk8-open'){
                                    sh "mvn clean package -Dmule.env=dev"
                                }
                            }
                        } 
                        stage ('Docker - Build') {
                            when {
                              expression { SHOULD_BUILD_IMAGE == 'true' }
                            }                  
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'mac-ecr', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                    sh "export AWS_DEFAULT_REGION=sa-east-1"
                                    sh "\$(/usr/local/bin/aws ecr get-login --no-include-email --region sa-east-1)"
                                    sh "docker build -t ${IMAGE_URL} --no-cache ."
                                }
                            }
                        }
                        stage('Docker - Push'){
                            when {
                              expression { SHOULD_PUSH_IMAGE == 'true' }
                            }
                            steps{
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'mac-ecr', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                    sh "docker push ${IMAGE_URL}"
                                    echo "Image push complete"
                                }
                            }
                        }
                        stage('Kubernetes Deploy'){
                            when {
                              expression { SHOULD_DEPLOY == 'true' }
                            }
                            steps {
                                script {
                                    for (deployment in configFromBranch(BRANCH_NAME).deployments) {
                                        sh """
                                            sed '
                                              s,{{IMAGE_URL}},${IMAGE_URL},g;
                                              s,{{NAMESPACE}},${deployment.namespace},g;
                                              s,{{PROJECT_NAME}},${PROJECT_NAME},g;
                                            ' ${deployment.deploymentFile} | /usr/local/sbin/kubectl apply -f -
                                            """
                                     }
                                }
                             }
                         }
                    }
                }
            }
        }
    }
}

def slackNotifier(String buildResult) {
  if ( buildResult == "SUCCESS" ) {
    slackSend color: "good",
    teamDomain: 'macmaceficios',
    tokenCredentialId: 'mac-slack',
    channel: '#backoffice-build',
    message: "Job: ${env.JOB_NAME} \nBuild: ${env.BUILD_NUMBER} \nStatus: Sucesso \nTempo: ${currentBuild.durationString.minus(' and counting')}"
  }
  else if( buildResult == "FAILURE" ) {
    slackSend color: "danger",
    teamDomain: 'macmaceficios',
    tokenCredentialId: 'mac-slack',
    channel: '#backoffice-build',
    message: "Job: ${env.JOB_NAME} \nBuild: ${env.BUILD_NUMBER} \nStatus: Falha \nTempo: ${currentBuild.durationString.minus(' and counting')}"
  }
  else if( buildResult == "UNSTABLE" ) {
    slackSend color: "warning",
      teamDomain: 'macmaceficios',
      tokenCredentialId: 'mac-slack',
      channel: '#backoffice-build',
      message: "Job: ${env.JOB_NAME} \nBuild: ${env.BUILD_NUMBER} \nStatus: Unstable \nTempo: ${currentBuild.durationString.minus(' and counting')}"
  }
  else if( buildResult == "ABORTED" ) {
    slackSend teamDomain: 'macmaceficios',
      tokenCredentialId: 'mac-slack',
      channel: '#backoffice-build',
      message: "Job: ${env.JOB_NAME} \nBuild: ${env.BUILD_NUMBER} \nStatus: Abortado \nTempo: ${currentBuild.durationString.minus(' and counting')}"
  }
  else if( buildResult == "null" ) {
    slackSend color: "warning",
      teamDomain: 'macmaceficios',
      tokenCredentialId: 'mac-slack',
      channel: '#backoffice-build',
      message: "Job: ${env.JOB_NAME} \nBuild: ${env.BUILD_NUMBER} \nStatus: Desconhecido \nTempo: ${currentBuild.durationString.minus(' and counting')}"
  }
}

@NonCPS
def configFromBranch(branch) {
    def env_dev = [
        rancherContext: 'c-lh4tc:p-qzrhd',
        deploymentFile: 'deployment.yml',
        namespace: 'backoffice-dev'
    ]
    def env_qa = [
        rancherContext: 'c-lh4tc:p-qzrhd',
        deploymentFile: 'deployment.yml',
        namespace: 'backoffice-qa'
    ]
    def env_staging = [
        rancherContext: 'c-lh4tc:p-qzrhd',
        deploymentFile: 'deployment.yml',
        namespace: 'backoffice-staging'
    ]
    def env_prd = [
        rancherContext: '',
        deploymentFile: '',
        namespace: ''
    ]
    if (branch ==~ /(development)/) { 
        return [
            shouldTest: true,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: true,
            env: 'development',
            tag: 'dev',
            deployments: [env_dev]
        ]
    }
    else if (branch ==~ /(qa)/) {
        return [
            shouldTest: true,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: true,
            env: 'qa',
            tag: 'qa',
            deployments: [env_qa]
        ]
    }
    else if (branch ==~ /(staging)/) {
        return [
            shouldTest: true,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: true,
            env: 'staging',
            tag: 'stg',
            deployments: [env_staging]
        ]
    }
    else if (branch ==~ /(master)/) {
        return [
            shouldTest: true,
            shouldBuildImage: true,
            shouldPushImage: true,
            shouldDeploy: false,
            env: 'production',
            tag: 'prd',
            deployments: [env_prd]
        ]
    }
    else {
        return [
            shouldTest: false,
            shouldBuildImage: false,
            shouldPushImage: false,
            shouldDeploy: false,
            env: 'development',
            tag: '-',
            deployments: []
        ]
    }
}

pipeline {
    agent none
    
    environment {
        CONFIG = configFromBranch(BRANCH_NAME)
        SHOULD_TEST = "${CONFIG.shouldTest}"
        SHOULD_BUILD_IMAGE = "${CONFIG.shouldBuildImage}"
        SHOULD_PUSH_IMAGE = "${CONFIG.shouldPushImage}"
        SHOULD_DEPLOY = "${CONFIG.shouldDeploy}"
        ENV = "${CONFIG.env}"

        GIT_URL="https://macvisacard@bitbucket.org/macvisacard/backoffice-core-front.git"
        PROJECT_NAME="backoffice-front-core"

        IMAGE_TAG = "${CONFIG.tag}-${env.BUILD_ID}"
        IMAGE_NAME = "${PROJECT_NAME}:${IMAGE_TAG}"
        IMAGE_URL = "123721783999.dkr.ecr.sa-east-1.amazonaws.com/${IMAGE_NAME}"
    }

    stages {
        stage ('CI') {
            agent {
                label 'TestContainer'
            }
            stages {
                stage('SCM - Checkout') {
                    steps{
                        cleanWs()
                        git branch: BRANCH_NAME, 
                        credentialsId: "bitb-mac", 
                        url: GIT_URL
                        echo 'SCM Checkout'
                    }
                }
                stage ('Test & Publish QA Reports'){
                    when {
                      expression { SHOULD_TEST == 'true' }
                    }
                    steps{
                        echo 'Test & Publish QA Reports'
                    }
                }
            }
        }
        stage ('CD') {
            stages {
                stage ('Deploy') {
                    agent {
                        label 'Build'
                    }
                    stages{
                        stage ('NPM Build'){
                            steps{
                                sh "rm -rf node_modules/"
                                sh "eval \$(ssh-agent); ssh-add ~/.ssh/id_rsa"
                                sh "yarn install"
                                sh "yarn build:${ENV}"
                            }
                        } 
                        stage ('Docker - Build') {
                            when {
                              expression { SHOULD_BUILD_IMAGE == 'true' }
                            }                  
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'mac-ecr', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                    sh "export AWS_DEFAULT_REGION=sa-east-1"
                                    sh "\$(/usr/local/bin/aws ecr get-login --no-include-email --region sa-east-1)"
                                    sh "docker build --pull -t ${IMAGE_URL} --no-cache ."
                                    sh "echo ${IMAGE_URL} > sysdig_secure_images"
                                }
                            }
                        }
                        stage('Docker - Push'){
                            when {
                              expression { SHOULD_PUSH_IMAGE == 'true' }
                            }
                            steps{
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'mac-ecr', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                                    sh "docker push ${IMAGE_URL}"
                                    echo "Image push complete"
                                }
                            }
                        }
                        stage('Sysdig Analysis - Scan'){
                            when {
                              expression { SHOULD_PUSH_IMAGE == 'true' }
                            }
                            steps{
                                script {
                                    try {
                                        sysdig engineCredentialsId: 'sysdig-token', name: 'sysdig_secure_images', inlineScanning: true, bailOnFail: true, bailOnPluginFail: true
                                    } catch (err) {
                                        echo err.getMessage()
                                        COMMIT_AUTHOR_EMAIL= sh(script: "git log -1 --pretty=format:\"%ae\"", , returnStdout: true).trim()
                                        wrap([$class: 'BuildUser']) {
                                            mail body: "Atenção, o job ${env.JOB_NAME} não passou na análise do Sysdig. Para mais informações, consulte o link abaixo.\
                                                        \n\nLink do build: ${BUILD_URL}", 
                                                         from: 'jenkins@macpreprod.com', 
                                                         mimeType: 'text/plain', 
                                                         replyTo: 'no-reply@macpreprod.com', 
                                                         subject: 'Falha no Sysdig', 
                                                         to: "${COMMIT_AUTHOR_EMAIL}"
                                        }
                                        sh "exit 1"
                                    }
                                }
                            }
                        }
                        stage('Kubernetes Deploy'){
                            when {
                              expression { SHOULD_DEPLOY == 'true' }
                            }
                            steps {
                                script {
                                    for (deployment in configFromBranch(BRANCH_NAME).deployments) {
                                        sh """
                                            sed '
                                              s,{{IMAGE_URL}},${IMAGE_URL},g;
                                              s,{{NAMESPACE}},${deployment.namespace},g;
                                              s,{{PROJECT_NAME}},${PROJECT_NAME},g;
                                            ' ${deployment.deploymentFile} | /usr/local/sbin/kubectl apply -f -
                                            """
                                     }
                                }
                             }
                         }
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                slackNotifier('SUCCESS')
            }
        }
        failure{
            script{
                slackNotifier('FAILURE')
            }
        }
        unstable{
            script{
                slackNotifier('UNSTABLE')
            }
        }
        aborted{
            script{
                slackNotifier('ABORTED')
            }
        }
    }
}
